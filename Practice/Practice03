--  Practice03  2020년 06월 09일
--  테이블 간 JOIN sql 문제입니다.
--------------------------------------------------------------------------------------------------------------------------------
--  문제1.
--  직원들의 사번(employee_id), 이름(first_name), 성(last_name)과 부서명(department_name)을 조회하여
--  부서이름(department_name)의 오름차순, 사번(employee_id)의 내림차순으로 정렬하세요.                                          (106건)

--  1번째 방법  (106건)                                                                                                       (O)
SELECT
    e.employee_id "사번",
    e.first_name "이름",
    e.last_name "성",
    e.department_id "부서아이디e",
    d.department_id "부서아이디d",
    d.department_name "부서명"
FROM employees e, departments d
where e.department_id = d.department_id
order by
    d.department_name asc,
    e.department_id desc;

--  2번째 방법  (107건)                                                                                                       (X)
SELECT
    e.employee_id "사번",
    e.first_name "이름",
    e.last_name "성",
    e.department_id "부서아이디e",
    d.department_id "부서아이디d",
    d.department_name "부서명"
FROM employees e left outer join departments d
on   e.department_id = d.department_id
order by d.department_name asc,
         e.employee_id desc;

--------------------------------------------------------------------------------------------------------------------------------
--  문제2.
--  employees테이블의 job_id는 현재의 업무아이디를 가지고 있습니다.
--  직원들의 사번(employee_id), 이름(first_name), 급여(salary), 부서명(department_name), 현재업무(job_title)를 사번(employee_id)의 오름차순으로 정렬하세요.
--  부서가 없는 Kimberely(사번178)은 표시하지 않습니다.                                                                       (106건)
SELECT
    e.employee_id "사번",
    e.first_name "이름",
    e.salary "급여",
    d.department_name "부서명",
    j.job_title "현재업무"
FROM employees e, departments d, jobs j
where
    e.department_id = d.department_id
and e.job_id = j.job_id
order by e.employee_id asc;

--------------------------------------------------------------------------------------------------------------------------------
--  문제2-1.
--  문제2에서 부서가 없는 Kimberely(사번178)까지 표시해 보세요.                                                                (107건)
SELECT
    e.employee_id "사번",
    e.first_name "이름",
    e.salary "급여",
    d.department_name "부서명",
    j.job_title "현재업무"
FROM
    employees e left outer join departments d
    on e.department_id = d.department_id left outer join jobs j     -- 테이블을 join한 후 한번 더 하기 위해서는 완료된 것에 이어서 작성하면 됩니다.
    on e.job_id = j.job_id
order by e.employee_id asc;

--------------------------------------------------------------------------------------------------------------------------------
--  문제3.                                                                                                                    (O)
--  도시별로 위치한 부서들을 파악하려고 합니다.
--  도시아이디(location_id), 도시명(city), 부서명(department_name), 부서아이디(department_id)를
--  도시아이디(location_id)의 오름차순으로 정렬하여 출력하세요.
--  부서가 없는 도시는 표시하지 않습니다.                                                                                      (27건)
SELECT
    l.city "도시명",
    l.location_id "도시아이디l",
    d.location_id "도시아이디d",
    d.department_name "부서명",
    d.department_id "부서아이디"
FROM departments d, locations l
where d.location_id = l.location_id
order by l.location_id asc;

--------------------------------------------------------------------------------------------------------------------------------
--  문제3-1.                                                                                      location과 department의 자리 (O)
--  문제3에서 부서가 없는 도시까지 표시합니다.                                                                                 (43건)
SELECT
    l.city "도시명",
    l.location_id "도시아이디l",
    d.location_id "도시아이디d",
    d.department_name "부서명",
    d.department_id "부서아이디"
FROM locations l left outer join departments d
on   l.location_id = d.location_id
order by l.location_id asc;

--------------------------------------------------------------------------------------------------------------------------------
--  문제4.
--  지역(regions)에 속한 나라들을 지역이름(regions_name), 나라이름(country_name)으로 출력하되
--  지역이름의 오름차순과 나라이름의 내림차순으로 정렬하여 출력하세요.                                                             (25건)
SELECT
    r.region_name "지역이름",
    r.region_id "지역아이디r",
    c.region_id "지역아이디c",
    c.country_name "나라이름"
FROM regions r, countries c
where r.region_id = c.region_id
order by r.region_name asc,
         c.country_name desc;

--------------------------------------------------------------------------------------------------------------------------------
--  문제5.
--  자신의 매니저보다 채용일(hire_date)이 빠른 사원의 사번, 이름, 채용일, 매니저이름, 매니저입사일을 조회하여 출력하세요.
--  (employee_id, first_name, hire_date, first_name, hire_date)                                                           (37건)
SELECT
    emp.employee_id "사번",
    emp.first_name "이름",
    emp.hire_date "채용일",
    man.first_name "매니저이름",
    man.hire_date "매니저입사일"
FROM employees emp, employees man
where
    emp.hire_date < man.hire_date
and emp.manager_id = man.employee_id;

--------------------------------------------------------------------------------------------------------------------------------
--  문제6.
--  나라별로 어떠한 부서들이 위치하고 있는지 파악하려고 합니다.
--  나라명, 나라아이디, 도시명, 도시아이디, 부서명, 부서아이디를 나라명의 오름차순으로 정렬하여 출력하세요.
--  값이 없는 경우는 표시하지 않습니다.
--  (country_name, country_id, /city, location_id, /department_name, department_id)                                         (27건)
SELECT
    c.country_name "나라명",
    c.country_id "나라아이디",
    l.city "도시명",
    l.location_id "도시아이디",
    d.department_name "부서명",
    d.department_id "부서아이디"
FROM countries c, locations l, departments d
where
    c.country_id = l.country_id
and l.location_id = d.location_id;

--------------------------------------------------------------------------------------------------------------------------------
--  문제7.
--  job_history 테이블은 과거의 담당업무의 데이터를 가지고 있다.
--  과거의 업무아이디(job_id)가 'AC_ACCOUNT'로 근무한 사원의 사번, 이름(풀네임), 업무아이디, 시작일, 종료일을 출력하세요.
--  이름은 first_name과 last_name을 합쳐서 출력합니다.                                                                         (2건)
SELECT
    e.employee_id "사번",
    e.first_name || '-' || e.last_name "이름(풀네임)",
    j.job_id "업무아이디",
    j.start_date "시작일",
    j.end_date "종료일"
FROM job_history j, employees e
where 
    e.employee_id = j.employee_id
and j.job_id = 'AC_ACCOUNT';

--------------------------------------------------------------------------------------------------------------------------------
--  문제8.
--  각 부서(department)에 대해서 부서번호(department_id), 부서이름(department_name), 매니저의 이름(first_name),
--  위치한 도시(city), 나라의 이름 (countries_name) 그리고 지역구분의 이름(region_name)까지 전부 출력해 보세요.                    (11건)
SELECT
    d.department_id "부서번호",
    d.department_name "부서이름",
    e.first_name "매니저이름",
    l.city "위치한 도시",
    c.country_name "나라의 이름",
    r.region_name "지역구분의 이름"
FROM departments d, employees e, locations l, countries c, regions r
where
    d.manager_id = e.employee_id
and d.location_id = l.location_id
and l.country_id = c.country_id
and c.region_id = r.region_id;

--------------------------------------------------------------------------------------------------------------------------------
--  문제9.
--  각 사원에 대하여 사번(employee_id), 이름(first_name), 부서명(department_name), 매니저의 이름(first_name)을 조회하세요.
--  부서가 없는 직원(Kimberely)도 표시합니다.                                                                                (106명)
SELECT
    emp.employee_id "사번",
    emp.first_name "이름",
    dep.department_name "부서명",
    man.first_name "매니저의 이름"
FROM employees emp, employees man, departments dep
where
    emp.employee_id = man.manager_id
and emp.department_id = dep.department_id;